# Define the list of allowable asset IDs that can vote
ALLOWED_ASSET_IDS = [847620686, 847623993, 847624684, 847626916, 847628005, 847629424, 847630076, 847630924, 847631670, 847643786, 847646985, 847647495, 847648006, 847648551, 847650118, 847650981, 847651519, 847651910, 847657296, 847658184, 847658978, 847661044, 847662602, 847663994, 847664657, 847665225, 847665771, 847674061, 847674707, 847677614, 847677960, 847678845, 847681885, 847684869, 847685770, 847686840, 847689244, 847689365, 847690075, 847690499, 847690679, 847690919, 847691098, 847691556, 847691568, 847692698, 847693769, 847695061, 847695769, 847697463, 847697925, 847699580, 847700120, 847700529, 847701251, 847701302, 847701711, 847701862, 847702040, 847702128, 847702627, 847702949, 847703374, 847703551, 847703902, 847704842, 847705324, 847705588, 847705908, 847706446, 847706931, 847706936, 847707727, 847708060, 847711277, 847712702, 847713393, 847714065, 847716237, 847717034, 847717236, 847717783, 847718105, 847718392, 847718557, 847719068, 847719086, 847719731, 847720012, 847720410, 847720765, 847721175, 847721580, 847727294, 847727625, 847727729, 847728064, 847728327, 847728621, 847728700, 847729179, 847729320, 847729488, 847729707, 847729770, 847730094, 847730128, 847730492, 847732126, 847732821, 847733414, 847733444, 847733748, 847733818, 847735291, 847736021, 847736475, 847737554, 847738022, 847738728, 847739096, 847741241, 847742234, 847742685, 847743254, 847744199, 847744504, 847744957, 847745337, 847745552, 847745922, 847746214, 847746622, 847747533, 847747788, 847749409, 847749816, 847750193, 847750513, 847751110, 847751544, 847751829, 847752664, 847752753, 847753041, 847753045, 847753488, 847753589, 847753963, 847753967, 847754340, 847754449, 847754905, 847755109, 847755424, 847755536, 847755781, 847755948, 847756230, 847756481, 847756557, 847756909, 847757436, 847758537, 847759476, 847759697, 847760148, 847760800, 847761439, 847762258, 847762893, 847767269, 847768329, 847768680, 847768989, 847769302, 847770493, 847771325, 847771633, 847772011, 847772369, 847772640, 847773396, 847774406, 847774988, 847775525, 847775776, 847776078, 847776380, 847776653, 847776915, 847777293, 847777577, 847778520, 847779318, 847779828, 847780105, 847780476, 847780835, 847781130, 847982090, 847982790, 847983293, 847983770, 847984301, 847985118, 847985800, 848608982, 848609716, 848669638, 848670846, 848671663, 848672799, 848681853, 848682587, 848683362, 849665163, 849665692, 849666540, 849667211, 849940573, 849941544, 849943663, 849945901, 849946523]

# Define the voting period in rounds
VOTING_PERIOD_ROUNDS = 10

# Load PyTeal dependencies
from pyteal import *

# Define the PyTeal contract
def voting_contract():

    # Check if transaction is a payment
    is_payment = Txn.type_enum() == TxnType.Payment

    # Check if the asset ID is allowed to vote
    asset_allowed = Txn.asset_amount() == Int(0) and Txn.asset_id() in ALLOWED_ASSET_IDS

    # Check if the sender is the owner of the Governance NFT
    is_owner = Txn.sender() == Txn.assets()[0].sender()

    # Define the voting app logic
    voting_app_logic = And(
        is_payment,
        asset_allowed,
        is_owner,
        Txn.application_args[0] == Bytes("vote"),
        Txn.application_args[1].type_of() == TealType.uint64
    )

    # Define the voting app approval program
    approval_program = voting_app_logic

    # Define the voting app clear state program
    clear_state_program = Return(Int(1))

    # Define the finalization program that tallies the votes and returns the result
    finalization_program = Seq(
        If(Global.round() >= Int(VOTING_PERIOD_ROUNDS),
            Let(
                # Get the list of all votes made during the voting period
                all_votes = App.localGetEx(Int(0), Bytes("votes")).value(),

                # Count the total number of votes
                total_votes = App.localGetEx(Int(0), Bytes("total_votes")).value() + Len(all_votes),

                # Return the final votes
                App.localPut(Bytes("final_votes"), Bytes("result"), Bytes(str(total_votes))),
                Return(Int(1))
            ),
            Return(Int(0))
        )
    )

    # Return the combined contract
    return Contract(
        approval_program=approval_program,
        clear_state_program=clear_state_program,
        finalization_program=finalization_program
    )

# Print the compiled PyTeal contract
print(voting_contract().compile())
