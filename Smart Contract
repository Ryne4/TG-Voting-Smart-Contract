from pyteal import *

# Define the voting asset IDs
asset_ids = [
Int(847620686),
Int(847623993),
Int(847624684),
Int(847626916),
Int(847628005),
Int(847629424),
Int(847630076),
Int(847630924),
Int(847631670),
Int(847643786),
Int(847646985),
Int(847647495),
Int(847648006),
Int(847648551),
Int(847650118),
Int(847650981),
Int(847651519),
Int(847651910),
Int(847657296),
Int(847658184),
Int(847658978),
Int(847661044),
Int(847662602),
Int(847663994),
Int(847664657),
Int(847665225),
Int(847665771),
Int(847674061),
Int(847674707),
Int(847677614),
Int(847677960),
Int(847678845),
Int(847681885),
Int(847684869),
Int(847685770),
Int(847686840),
Int(847689244),
Int(847689365),
Int(847690075),
Int(847690499),
Int(847690679),
Int(847690919),
Int(847691098),
Int(847691556),
Int(847691568),
Int(847692698),
Int(847693769),
Int(847695061),
Int(847695769),
Int(847697463),
Int(847697925),
Int(847699580),
Int(847700120),
Int(847700529),
Int(847701251),
Int(847701302),
Int(847701711),
Int(847701862),
Int(847702040),
Int(847702128),
Int(847702627),
Int(847702949),
Int(847703374),
Int(847703551),
Int(847703902),
Int(847704842),
Int(847705324),
Int(847705588),
Int(847705908),
Int(847706446),
Int(847706931),
Int(847706936),
Int(847707727),
Int(847708060),
Int(847711277),
Int(847712702),
Int(847713393),
Int(847714065),
Int(847716237),
Int(847717034),
Int(847717236),
Int(847717783),
Int(847718105),
Int(847718392),
Int(847718557),
Int(847719068),
Int(847719086),
Int(847719731),
Int(847720012),
Int(847720410),
Int(847720765),
Int(847721175),
Int(847721580),
Int(847727294),
Int(847727625),
Int(847727729),
Int(847728064),
Int(847728327),
Int(847728621),
Int(847728700),
Int(847729179),
Int(847729320),
Int(847729488),
Int(847729707),
Int(847729770),
Int(847730094),
Int(847730128),
Int(847730492),
Int(847732126),
Int(847732821),
Int(847733414),
Int(847733444),
Int(847733748),
Int(847733818),
Int(847735291),
Int(847736021),
Int(847736475),
Int(847737554),
Int(847738022),
Int(847738728),
Int(847739096),
Int(847741241),
Int(847742234),
Int(847742685),
Int(847743254),
Int(847744199),
Int(847744504),
Int(847744957),
Int(847745337),
Int(847745552),
Int(847745922),
Int(847746214),
Int(847746622),
Int(847747533),
Int(847747788),
Int(847749409),
Int(847749816),
Int(847750193),
Int(847750513),
Int(847751110),
Int(847751544),
Int(847751829),
Int(847752664),
Int(847752753),
Int(847753041),
Int(847753045),
Int(847753488),
Int(847753589),
Int(847753963),
Int(847753967),
Int(847754340),
Int(847754449),
Int(847754905),
Int(847755109),
Int(847755424),
Int(847755536),
Int(847755781),
Int(847755948),
Int(847756230),
Int(847756481),
Int(847756557),
Int(847756909),
Int(847757436),
Int(847758537),
Int(847759476),
Int(847759697),
Int(847760148),
Int(847760800),
Int(847761439),
Int(847762258),
Int(847762893),
Int(847767269),
Int(847768329),
Int(847768680),
Int(847768989),
Int(847769302),
Int(847770493),
Int(847771325),
Int(847771633),
Int(847772011),
Int(847772369),
Int(847772640),
Int(847773396),
Int(847774406),
Int(847774988),
Int(847775525),
Int(847775776),
Int(847776078),
Int(847776380),
Int(847776653),
Int(847776915),
Int(847777293),
Int(847777577),
Int(847778520),
Int(847779318),
Int(847779828),
Int(847780105),
Int(847780476),
Int(847780835),
Int(847781130),
Int(847982090),
Int(847982790),
Int(847983293),
Int(847983770),
Int(847984301),
Int(847985118),
Int(847985800),
Int(848608982),
Int(848609716),
Int(848669638),
Int(848670846),
Int(848671663),
Int(848672799),
Int(848681853),
Int(848682587),
Int(848683362),
Int(849665163),
Int(849665692),
Int(849666540),
Int(849667211),
Int(849940573),
Int(849941544),
Int(849943663),
Int(849945901),
Int(849946523),
]

# The proposal ID to vote on
proposal_id = Int(123456789)

# Define the contract logic
contract = And(
    # Check that the transaction sender owns one of the NFTs
    Or([Txn.asset_amount(nft) for nft in nft_list]),
    # Check that the transaction is an approval of the proposal
    Txn.application_id() == proposal_id,
    Txn.on_completion() == OnComplete.NoOp,
    # Check that the transaction is not a rekey
    Txn.rekey_to() == Global.zero_address(),
    # Check that the transaction fee is less than or equal to 1000 microalgos
    Txn.fee() <= Int(1000),
)

# Print the contract code
print(compileTeal(contract, Mode.Signature))
